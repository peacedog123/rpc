syntax = "proto2";

option optimize_for = SPEED;

package kudu.rpc;

message RemoteMethodPB {
  // Service name for the RPC layer.
  // The client created a proxy with this service name.
  // Example: kudu.rpc_test.CalculatorService
  required string service_name = 1;

  // Name of the RPC method.
  required string method_name = 2;
}

// The Id of a retriable RPC, whose results should be tracked on the server (see result_tracker.h).
// This also includes some information that is useful for execution/garbage collection.
message RequestIdPB {
  // The (globally unique) id of the client performing this RPC.
  required string client_id = 1;

  // The (per-client unique) sequence number of this RPC.
  required int64 seq_no = 2;

  // The sequence number of the first RPC that has not been marked as completed by the client.
  // Unset if there isn't an incomplete RPC.
  required int64 first_incomplete_seq_no = 3;

  // The number of times this RPC has been tried.
  // Set to 1 in the first attempt.
  required int64 attempt_no = 4;
}

// The header for the RPC request frame.
message RequestHeader {
  // A sequence number that uniquely identifies a call to a single remote server. This number is
  // sent back in the Response and allows to match it to the original Request.
  // Hadoop specifies a uint32 and casts it to a signed int. That is counterintuitive, so we use an
  // int32 instead. Allowed values (inherited from Hadoop):
  //   0 through INT32_MAX: Regular RPC call IDs.
  //   -2: Invalid call ID.
  //   -3: Connection context call ID.
  //   -33: SASL negotiation call ID.
  //
  // NOTE: these calls must be increasing but may have gaps.
  required int32 call_id = 3;

  // RPC method being invoked.
  // Not used for "connection setup" calls.
  optional RemoteMethodPB remote_method = 6;

  // Propagate the timeout as specified by the user. Note that, since there is some
  // transit time between the client and server, if you wait exactly this amount of
  // time and then respond, you are likely to cause a timeout on the client.
  optional uint32 timeout_millis = 10;
}

message ResponseHeader {
  required int32 call_id = 1;

  // If this is set, then this is an error response and the
  // response message will be of type ErrorStatusPB instead of
  // the expected response type.
  optional bool is_error = 2 [ default = false ];
}

// Sent as response when is_error == true.
message ErrorStatusPB {

  // These codes have all been inherited from Hadoop's RPC mechanism.
  enum RpcErrorCodePB {
    FATAL_UNKNOWN = 10;

    // Non-fatal RPC errors. Connection should be left open for future RPC calls.
    //------------------------------------------------------------
    // The application generated an error status. See the message field for
    // more details.
    ERROR_APPLICATION = 1;

    // The specified method was not valid.
    ERROR_NO_SUCH_METHOD = 2;

    // The specified service was not valid.
    ERROR_NO_SUCH_SERVICE = 3;

    // The server is overloaded - the client should try again shortly.
    ERROR_SERVER_TOO_BUSY = 4;

    // The request parameter was not parseable, was missing required fields,
    // or the server does not support the required feature flags.
    ERROR_INVALID_REQUEST = 5;

    // The server might have previously received this request but its response is no
    // longer cached. It's unknown whether the request was executed or not.
    ERROR_REQUEST_STALE = 6;

    // The server is not able to complete the connection or request at this
    // time. The client may try again later.
    ERROR_UNAVAILABLE = 7;

    // FATAL_* errors indicate that the client should shut down the connection.
    //------------------------------------------------------------
    // The RPC server is already shutting down.
    FATAL_SERVER_SHUTTING_DOWN = 11;
    // Fields of RpcHeader are invalid.
    FATAL_INVALID_RPC_HEADER = 12;
    // Could not deserialize RPC request.
    FATAL_DESERIALIZING_REQUEST = 13;
    // IPC Layer version mismatch.
    FATAL_VERSION_MISMATCH = 14;
    // Auth failed.
    FATAL_UNAUTHORIZED = 15;

    // The authentication token is invalid or expired;
    // the client should obtain a new one.
    FATAL_INVALID_AUTHENTICATION_TOKEN = 16;
  }

  required string message = 1;

  // TODO: Make code required?
  optional RpcErrorCodePB code = 2;  // Specific error identifier.
}
